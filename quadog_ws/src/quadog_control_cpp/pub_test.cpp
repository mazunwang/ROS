#include <ros/ros.h>
#include <std_msgs/String.h>
#include <std_msgs/Float64.h>
#include <sensor_msgs/Imu.h>
#include <sensor_msgs/JointState.h>
#include <quadog_control_cpp/my_msg.h>
#include<qpOASES.hpp>

using namespace std;

double secs;
double cnt;
double ori_x;

// void messageCallback(const sensor_msgs::Imu::ConstPtr& msg)
// {
//   //std::cout<<"IMU:"<<msg->orientation.x<<std::endl;;//用于在命令行中输出数据  
//   ori_x = msg->orientation.x;
// }

// void JointStateCallback(const sensor_msgs::JointState::ConstPtr& msg){
//   //FL_Knee_Pos = msg->position[2];
//   //FL_Knee_Vel = msg->velocity[2];
//   //cout<<"Tor:"<<msg->effort[2]<<endl;
//   cout<<ros::Time::now().toSec()-secs<<" "<<cnt++<<endl;
// }

int main(int argc, char *argv[])
{
// ros::init(argc, argv, "pub_num_node");


// ros::NodeHandle nh;
// ros::Duration(0.2).sleep();   
// ros::Subscriber sub = nh.subscribe("/imu", 10, messageCallback);
// ros::Subscriber sub2 = nh.subscribe("/quadog/joint_states",10,JointStateCallback);
// ros::Publisher num_pub = nh.advertise<quadog_control_cpp::my_msg>("msg_test", 10);

// secs =ros::Time::now().toSec();
// quadog_control_cpp::my_msg num;
// ros::AsyncSpinner spinner(4);
// ros::Rate rate_loop(100);
//     spinner.start();
// while (ros::ok())
// {

// num.angle = -1.5;
// num.vel = 0;
// num.effort = 0;
// num_pub.publish(num);
// //cout<<ros::Time::now().toSec()-secs<<" "<<cnt++<<" "<<ori_x<<endl;
// ros::spinOnce();
// rate_loop.sleep();
// }

//     ros::waitForShutdown();

USING_NAMESPACE_QPOASES
/* Setup data of first QP. */
// real_t H[2*2] = { 1.0, 0.0, 0.0, 0.5 };
// real_t H[12*12] = {1.25134,-0.0573308,0.162739,1.24397,0.0423796,-0.120299,1.18746,0.0433426,-0.123032,1.18495,-0.0566935,0.16093,
// -0.0573308,1.34805,0.0756335,-0.0627853,1.12361,0.0828293,0.0588015,1.12153,-0.0775737,0.0639934,1.33668,-0.0844231,
// 0.162739,0.0756335,1.16,0.162816,0.0756692,0.937992,0.162811,0.075667,0.879412,0.162739,0.0756335,1.09225,
// 1.24397,-0.0627853,0.162816,1.25685,0.0464116,-0.120355,1.18496,0.0474662,-0.12309,1.18222,-0.0620873,0.161006,
// 0.0423796,1.12361,0.0756692,0.0464116,1.2923,0.0828683,-0.0434668,1.28383,-0.0776102,-0.0473047,1.12462,-0.0844629,
// -0.120299,0.0828293,0.937992,-0.120355,0.0828683,1.10936,-0.120352,0.0828659,1.03901,-0.120299,0.0828292,0.877256,
// 1.18746,0.0588015,0.162811,1.18496,-0.0434668,-0.120352,1.25291,-0.0444545,-0.123087,1.24529,0.0581479,0.161001,
// 0.0433426,1.12153,0.075667,0.0474662,1.28383,0.0828659,-0.0444545,1.29539,-0.077608,-0.0483796,1.12257,-0.0844604,
// -0.123032,-0.0775737,0.879412,-0.12309,-0.0776102,1.03901,-0.123087,-0.077608,1.10853,-0.123032,-0.0775737,0.938281,
// 1.18495,0.0639934,0.162739,1.18222,-0.0473047,-0.120299,1.24529,-0.0483796,-0.123032,1.25789,0.063282,0.16093,
// -0.0566935,1.33668,0.0756335,-0.0620873,1.12462,0.0828292,0.0581479,1.12257,-0.0775737,0.063282,1.34532,-0.084423,
// 0.16093,-0.0844231,1.09225,0.161006,-0.0844629,0.877256,0.161001,-0.0844604,0.938281,0.16093,-0.084423,1.16383
// };
real_t H[12*12] = {1.25864,-0.0563605,0.1536,1.24864,0.0497507,-0.135586,1.18983,0.0495922,-0.135154,1.18967,-0.056846,0.154923,
-0.0563605,1.3368,0.0804082,-0.05613,1.12422,0.0800793,0.0562539,1.12454,-0.0802561,0.0563007,1.32774,-0.0803229,
0.1536,0.0804082,1.14717,0.153685,0.0804526,0.934347,0.153696,0.0804586,0.875818,0.153605,0.0804108,1.07912,
1.24864,-0.05613,0.153685,1.25864,0.0495472,-0.135661,1.19007,0.0493894,-0.135229,1.18991,-0.0566135,0.155009,
0.0497507,1.12422,0.0804526,0.0495472,1.31327,0.0801235,-0.0496566,1.30302,-0.0803004,-0.0496979,1.12341,-0.0803672,
-0.135586,0.0800793,0.934347,-0.135661,0.0801235,1.12315,-0.135671,0.0801295,1.0543,-0.135591,0.0800819,0.874792,
1.18983,0.0562539,0.153696,1.19007,-0.0496566,-0.135671,1.25881,-0.0494984,-0.135239,1.2487,0.0567385,0.15502,
0.0495922,1.12454,0.0804586,0.0493894,1.30302,0.0801295,-0.0494984,1.31277,-0.0803064,-0.0495396,1.12373,-0.0803732,
-0.135154,-0.0802561,0.875818,-0.135229,-0.0803004,1.0543,-0.135239,-0.0803064,1.12275,-0.135159,-0.0802587,0.933867,
1.18967,0.0563007,0.153605,1.18991,-0.0496979,-0.135591,1.2487,-0.0495396,-0.135159,1.25859,0.0567857,0.154928,
-0.056846,1.32774,0.0804108,-0.0566135,1.12341,0.0800819,0.0567385,1.12373,-0.0802587,0.0567857,1.33868,-0.0803255,
0.154923,-0.0803229,1.07912,0.155009,-0.0803672,0.874792,0.15502,-0.0803732,0.933867,0.154928,-0.0803255,1.14897
};

real_t A[20*12] = {1,0,-0.5,0,0,0,0,0,0,0,0,0,
0,1,-0.5,0,0,0,0,0,0,0,0,0,
0,1,0.5,0,0,0,0,0,0,0,0,0,
1,0,0.5,0,0,0,0,0,0,0,0,0,
0,0,1,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,-0.5,0,0,0,0,0,0,
0,0,0,0,1,-0.5,0,0,0,0,0,0,
0,0,0,0,1,0.5,0,0,0,0,0,0,
0,0,0,1,0,0.5,0,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,1,0,-0.5,0,0,0,
0,0,0,0,0,0,0,1,-0.5,0,0,0,
0,0,0,0,0,0,0,1,0.5,0,0,0,
0,0,0,0,0,0,1,0,0.5,0,0,0,
0,0,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,0,0,0,1,0,-0.5,
0,0,0,0,0,0,0,0,0,0,1,-0.5,
0,0,0,0,0,0,0,0,0,0,1,0.5,
0,0,0,0,0,0,0,0,0,1,0,0.5,
0,0,0,0,0,0,0,0,0,0,0,1};
// real_t g[12] = {125.694,-12.1357,-641.76,126.064,2.31976,-650.06,117.872,2.45933,-651.007,117.52,-12.0433,-642.677};
real_t g[12] = {51.0846,
1.55651,
-635.055,
51.0866,
-0.644036,
-633.972,
52.3067,
-0.640717,
-634.284,
52.3077,
1.56659,
-635.372};
real_t lb[12] = {-1e+06,
-1e+06,
-1e+06,
-1e+06,
-1e+06,
-1e+06,
-1e+06,
-1e+06,
-1e+06,
-1e+06,
-1e+06,
-1e+06};
real_t ub[12] = { 1e+06,
1e+06,
1e+06,
1e+06,
1e+06,
1e+06,
1e+06,
1e+06,
1e+06,
1e+06,
1e+06,
1e+06 };
real_t lbA[20] = { -1e+06,
-1e+06,
0,
0,
10,
-1e+06,
-1e+06,
0,
0,
10,
-1e+06,
-1e+06,
0,
0,
10,
-1e+06,
-1e+06,
0,
0,
10};
real_t ubA[20] = { 0,
0,
1e+06,
1e+06,
660,
0,
0,
1e+06,
1e+06,
660,
0,
0,
1e+06,
1e+06,
660,
0,
0,
1e+06,
1e+06,
660};
/* Setup data of second QP. */
// real_t g_new[2] = { 1.0, 1.5 };
// real_t lb_new[2] = { 0.0, -1.0 };
// real_t ub_new[2] = { 5.0, -0.5 };
// real_t lbA_new[1] = { -2.0 };
// real_t ubA_new[1] = { 1.0 };
/* Setting up QProblem object. */
QProblem example( 12,20 );
/* Solve first QP. */
int_t nWSR = 100;
real_t cpu_time = 0.1;

returnValue qpfinished;
qpfinished = example.init( H,g,A,lb,ub,lbA,ubA, nWSR,&cpu_time );
if(qpfinished==SUCCESSFUL_RETURN){std::cout<<"adgadg"<<std::endl;}
/* Solve second QP. */
// nWSR = 10;
// example.hotstart( g_new,lb_new,ub_new,lbA_new,ubA_new, nWSR );
/* Get and print solution of second QP. */
real_t xOpt[12];
example.getPrimalSolution( xOpt );
// printf( "\n xOpt = [ %e, %e ]; objVal = %e\n\n",
// xOpt[0],xOpt[1],example.getObjVal() );
for(int i=0;i<12;++i) std::cout<<xOpt[i]<<std::endl;
return 0;
}

